learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header = TRUE, sep = "\t")
# dimension of the table:
dim(learning2014)
# both dimension and structure:
str(learning2014)
# create new dataset
# install.packages("dplyr")
library(dplyr)
# combine variables into deep
deep_qu <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_col <- select(learning2014, one_of(deep_qu))
learning2014$deep <- rowMeans(deep_col)
# combine variables into stra
stra_qu <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
stra_col <- select(learning2014,one_of(stra_qu))
learning2014$stra <- rowMeans(stra_col)
# combine variables into surf
surf_qu <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surf_col <- select(learning2014, one_of(surf_qu))
learning2014$surf <- rowMeans(surf_col)
# choose columns:
columns <- c("gender","Age","Attitude","deep","stra","surf","Points")
# create new dataset
new_lrn14 <- select(learning2014,columns)
# select only positive points
# (and check that the right number of entries is left)
new_lrn14 <- filter(new_lrn14, Points>0)
# create new dataset
install.packages("dplyr")
source('//atkk/home/s/scarabel/Documents/GitHub/IODS-project/data/create_learning2014.R', echo=TRUE)
# Plot the results
# Access the gglot2 library
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
# Plot the results
# Access the gglot2 library
library(ggplot2)
# Plot the results
# Access the gglot2 library
library(ggplot2)
install.packages("ggplot2")
summary(students2014$gender)
install.packages("ggplot2")
install.packages("ggplot2")
# load table data
learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header = TRUE, sep = "\t")
# dimension of the table:
dim(learning2014)
# both dimension and structure:
str(learning2014)
# create new dataset
# install.packages("dplyr")
library(dplyr)
# combine variables into deep
deep_qu <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_col <- select(learning2014, one_of(deep_qu))
learning2014$deep <- rowMeans(deep_col)
# combine variables into stra
stra_qu <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
stra_col <- select(learning2014,one_of(stra_qu))
# create new dataset
install.packages("dplyr")
# create new dataset
install.packages("dplyr")
# create new dataset
install.packages("dplyr")
library(dplyr)
library(dplyr)
# create new dataset
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# combine variables into deep
deep_qu <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_col <- select(learning2014, one_of(deep_qu))
learning2014$deep <- rowMeans(deep_col)
# I first load the dataset from the folder IODS-project and save it with name "students2014".
setwd("~/GitHub/IODS-project")
options(max.print=2000)
students2014 <- read.csv("learning2014")
str(new_lrn14)
colnames(students2014)[2] <- "age"
colnames(students2014)[3] <- "attitude"
colnames(students2014)[7] <- "points"
colnames(students2014)[2] <- "age"
colnames(students2014)[3] <- "attitude"
colnames(students2014)[7] <- "points"
str(students2014)
setwd("~/GitHub/IODS-project")
options(max.print=2000)
students2014 <- read.csv("learning2014")
str(students2014)
colnames(students2014)[3] <- "age"
colnames(students2014)[4] <- "attitude"
colnames(students2014)[8] <- "points"
str(students2014)
plot(summary(students2014$age))
plot(summary(students2014$gender))
plot(summary(students2014$points))
library(GGally)
library(ggplot2)
p <- ggpairs(students2014, mapping = aes(col=gender), lower = list(combo = wrap("facethist", bins = 20)))
p
library(GGally)
library(ggplot2)
p <- ggpairs(students2014, mapping = aes(col=gender), lower = list(combo = wrap("facethist", bins = 20)))
p
# load table data
learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header = TRUE, sep = "\t")
# dimension of the table:
dim(learning2014)
# both dimension and structure:
str(learning2014)
# create new dataset
install.packages("dplyr")
# create new dataset
# install.packages("dplyr")
library(dplyr)
# combine variables into deep
deep_qu <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_col <- select(learning2014, one_of(deep_qu))
learning2014$deep <- rowMeans(deep_col)
# combine variables into stra
stra_qu <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
stra_col <- select(learning2014,one_of(stra_qu))
learning2014$stra <- rowMeans(stra_col)
# combine variables into surf
surf_qu <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surf_col <- select(learning2014, one_of(surf_qu))
learning2014$surf <- rowMeans(surf_col)
# choose columns:
columns <- c("gender","Age","Attitude","deep","stra","surf","Points")
# create new dataset
new_lrn14 <- select(learning2014,columns)
# select only positive points
# (and check that the right number of entries is left)
new_lrn14 <- filter(new_lrn14, Points>0)
str(new_lrn14)
# rename columns coherently
str(new_lrn14)
colnames(new_lrn14)[3] <- "age"
colnames(new_lrn14)[4] <- "attitude"
colnames(new_lrn14)[8] <- "points"
new_lrn14
str(new_lr14)
str(new_lrn14)
# load table data
learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header = TRUE, sep = "\t")
# dimension of the table:
dim(learning2014)
# both dimension and structure:
str(learning2014)
# create new dataset
# install.packages("dplyr")
library(dplyr)
# combine variables into deep
deep_qu <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_col <- select(learning2014, one_of(deep_qu))
learning2014$deep <- rowMeans(deep_col)
# combine variables into stra
stra_qu <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
learning2014$stra <- rowMeans(stra_col)
stra_col <- select(learning2014,one_of(stra_qu))
# combine variables into surf
surf_qu <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surf_col <- select(learning2014, one_of(surf_qu))
learning2014$surf <- rowMeans(surf_col)
# choose columns:
columns <- c("gender","Age","Attitude","deep","stra","surf","Points")
# create new dataset
new_lrn14 <- select(learning2014,columns)
# select only positive points
# (and check that the right number of entries is left)
new_lrn14 <- filter(new_lrn14, Points>0)
str(new_lrn14)
# rename columns coherently
str(new_lrn14)
colnames(new_lrn14)[2] <- "age"
colnames(new_lrn14)[3] <- "attitude"
colnames(new_lrn14)[7] <- "points"
new_lrn14
# choose working directory and save table
setwd("~/GitHub/IODS-project")
write.csv(new_lrn14, file="learning2014")
# read table (and make sure to print all the entries)
options(max.print=2000)
read.csv("learning2014")
# I first load the dataset from the folder IODS-project and save it with name "students2014".
setwd("~/GitHub/IODS-project")
options(max.print=2000)
students2014 <- read.csv("learning2014")
students2014
str(students2014)
dim(students2014)
str(students2014)
p <- ggpairs(students2014[-1], mapping = aes(col=gender), lower = list(combo = wrap("facethist", bins = 20)))
p
summary(my_model)
my_model <- lm( students2014$points ~ students2014$attitude + students2014$stra + students2014$surf)
summary(my_model)
my_model <- lm(points ~ attitude + stra + surf, data = students2014)
summary(my_model)
my_model2 <- lm(points ~ attitude + stra, data = students2014)
summary(my_model2)
?plot
?plot.lm
par(mfrow = c(1,3))
plot(my_model2, which=c(1,2,5))
require(cowplot)
```{r eval=TRUE, echo=FALSE, fig.width=3, fig.height=3}
library(MASS)
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
?paris
?pairs
pairs(Boston, upper.panel=panel.cor)
pairs(Boston)
pairs(Boston, hist=TRUE, cor=TRUE)
pairs(Boston[1:5], hist=TRUE, cor=TRUE)
pairs(Boston[1:5], diagonal="histogram", cor=TRUE)
library("ggplot2)
pairs(Boston[1:5], diagonal="histogram", cor=TRUE)
library("ggplot2")
pairs(Boston[1:5], diagonal="histogram", cor=TRUE)
pairs(Boston[1:5], diagonal="histogram", upper.panel=panel.cor)
pairs(Boston[1:5], diag.panel=panel.hist, upper.panel=panel.cor)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(Boston[1:5], diag.panel=panel.hist, upper.panel=panel.cor)
pairs(Boston, diag.panel=panel.hist, upper.panel=panel.cor)
cor_matrix<-cor(Boston) %>% round(digits=2)
library(dplyr)
cor_matrix<-cor(Boston) %>% round(digits=2)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
library(corrplot)
install.packages("corrplot")
library(corrplot)
cor_matrix<-cor(Boston) %>% round(digits=2)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
selected <- c("nox","age","dis","tax","medv")
selected <- c("crim","indus","nox","rad","tax","black","Istat","medv")
pairs(Boston(selected))
pairs(Boston[selected])
selected <- c("crim","indus","nox","rad","tax","black","Istat","medv")
pairs(Boston[selected])
selected <- c(1,9,10)
pairs(Boston[selected])
pairs(Boston[selected], diag.panel=panel.hist, upper.panel=panel.cor)
pairs(Boston[selected], diag.panel=panel.hist, upper.panel=panel.cor)
summary(Boston$crim)
summary(Boston$tax)
summary(Boston$rad)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- mutate(boston_scaled, -crim)
boston_scaled <- as.data.frame(boston_scaled)
boston_scaled <- mutate(boston_scaled, -crim)
str(boston_scaled)
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled)
bins <- quantile(boston_scaled$crim)
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label=c("low","med_low","med_high","high"))
boston_scaled <- dplyr::select(boston_scaled, -crim)
str(boston_scaled)
str(boston_scaled)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
str(boston_scaled)
n <- nrow(boston_scaled)
n
506/100
5.06*80
size(ind)
length(ind)
ind <- sample(n,  size = n * 0.8)
length(ind)
506-404
str(train)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
str(train)
summary(train)
lda.fit <- lda(crime ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 3)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 3)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.fit <- lda(crime ~ ., data = train)
# the function for lda biplot a~ .rrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 3)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 3)
str(test)
correct_crime <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
euc_dist <- dist(boston_scaled)
boston_scaled <- scale(Boston)
euc_dist <- dist(boston_scaled)
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
twcss <- sapply(1:5, function(k){kmeans(boston_scaled, k)$tot.withinss})
qplot(x = 1:k_max, y = twcss, geom = 'line')
qplot(x = 1:5, y = twcss, geom = 'line')
twcss <- sapply(1:10, function(k){kmeans(boston_scaled, k)$tot.withinss})
qplot(x = 1:10, y = twcss, geom = 'line')
qplot(x = 1:20, y = twcss, geom = 'line')
twcss <- sapply(1:20, function(k){kmeans(boston_scaled, k)$tot.withinss})
qplot(x = 1:20, y = twcss, geom = 'line')
km <-kmeans(boston_scaled, centers = 2)
pairs(boston_scaled, col = km$cluster)
km <-kmeans(boston_scaled, centers = 10)
pairs(boston_scaled, col = km$cluster)
km <-kmeans(boston_scaled, centers = 10)
pairs(boston_scaled(selected), col = km$cluster)
pairs(boston_scaled[selected], col = km$cluster)
selected
km <-kmeans(boston_scaled[selected], centers = 10)
km <-kmeans(boston_scaled, centers = 10)
pairs(boston_scaled[selected,], col = km$cluster)
pairs(boston_scaled[,selected], col = km$cluster)
km <-kmeans(boston_scaled, centers = 2)
pairs(boston_scaled[,selected], col = km$cluster)
km <-kmeans(boston_scaled, centers = 10)
pairs(boston_scaled[,selected], col = km$cluster)
install.packages("tidyverse")
km <-kmeans(boston_scaled, centers = 7)
pairs(boston_scaled[,selected], col = km$cluster)
km <-kmeans(boston_scaled, centers = 7)
pairs(boston_scaled[,selected], col = km$cluster)
str(km)
km
km$cluster
summary(km)
lda.fit <- lda(cluster ~ ., data = train)
km$cluster
str(km$cluster)
cluster <- km$cluster
boston_scale <- data.frame(boston_scale,cluster)
boston_scaled <- data.frame(boston_scaled,cluster)
str(boston_scaled)
boston_scaled <- scale(boston_scaled)
str(boston_scaled)
summary(boston_scaled$cluster)
summary(boston_scaled)
train <- boston_scaled[ind,]
str(train)
lda.fit <- lda(cluster ~ ., data = train)
class(train)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled)
bins <- quantile(boston_scaled$crim)
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label=c("low","med_low","med_high","high"))
boston_scaled <- data.frame(boston_scaled, crime)
summary(boston_scaled$crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
str(train)
euc_dist <- dist(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled)
class(boston_scaled)
train <- boston_scaled[ind,]
str(train)
class(train)
test <- boston_scaled[-ind,]
correct_classes <- test$
lda.fit <- lda(cluster ~ ., data = train)
str(train)
lda.fit <- lda(cluster ~ ., data = train)
lda.fit <- lda(cluster ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$cluster)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
```{r eval=TRUE}
km <-kmeans(boston_scaled, centers = 7)
boston_scaled <- scale(boston_scaled)
km <-kmeans(boston_scaled, centers = 7)
lda.arrows(lda.fit, myscale = 2)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
correct_classes <- test$cluster
test <- dplyr::select(test, -cluster)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
correct_classes <- test$cluster
test <- dplyr::select(test, -cluster)
lda.pred <- predict(lda.fit, newdata = test)%>% round(digits=2)
test <- dplyr::select(test, -cluster)
lda.pred <- predict(lda.fit, newdata = test)#%>% round(digits=2)
lda.fit <- lda(cluster ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$cluster)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
correct_classes <- test$cluster
test <- dplyr::select(test, -cluster)
lda.pred <- predict(lda.fit, newdata = test) %>% round(digits=2)
table(correct = correct_classes, predicted = lda.pred$class)
str(train)
str(test)
str(test)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
str(train)
class(train)
test <- boston_scaled[-ind,]
str(test)
lda.fit <- lda(cluster ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$cluster)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$cluster
test <- dplyr::select(test, -cluster)
lda.pred <- predict(lda.fit, newdata = test) %>% round(digits=2)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
table(correct = correct_classes %>% round(digits=2), predicted = lda.pred$class)
table(correct = correct_classes %>% round(digits=2), predicted = lda.pred$class%>% round(digits=2))
table(correct = correct_classes %>% round(digits=2), predicted = lda.pred$class %>% round(digits=2))
table(correct = correct_classes %>% round(digits=2), predicted = lda.pred$class %>% as.numeric %>% round(digits=2))
classes
km <-kmeans(boston_scaled, centers = 7)
str(km)
km <-kmeans(boston_scaled, centers = 7)
str(km)
summary(km)
cluster <- km$cluster
boston_scaled <- data.frame(boston_scaled,cluster)
boston_scaled <- scale(boston_scaled)
min(classes)
plot(lda.fit, dimen = 2, col=classes+2, pch=classes)
lda.arrows(lda.fit, myscale = 2)
